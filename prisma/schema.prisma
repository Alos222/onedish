generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type VendorPlace {
  formattedAddress String?
  geometry         VendorPlaceGeometry?
  htmlAttributions String[]
  icon             String?
  name             String?
  placeId          String?
  priceLevel       Int?
  rating           Float?
  url              String?
  website          String?
  photos           VendorPhoto[]
}

type VendorPlaceGeometry {
  location VendorPlaceGeometryLocation?
  viewport VendorPlaceGeometryViewport?
}

type VendorPlaceGeometryLocation {
  lat Float
  lng Float
}

type VendorPlaceGeometryViewport {
  east  Float
  north Float
  south Float
  west  Float
}

type VendorPhoto {
  url              String
  height           Float
  width            Float
  htmlAttributions String[]
}

type OneDish {
  id          String
  url         String
  title       String
  description String?
}

model Vendor {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  address     String
  name        String
  vendorImage String?
  place       VendorPlace?
  tier        String?
  oneDishes   OneDish[]

  @@map("vendors")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
